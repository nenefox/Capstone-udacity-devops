Description: >-
  Luis Alejandro Perez MÃ­nguez
  Cluster Definition for Cloud DevOps Engineer Nanodegree Capstone Project

Parameters:
  EnvironmentName:
    Description: Name of the Environment
    Type: String
    Default: capstone

Resources:
  ClusterSharedNodeSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Communication between all nodes in the cluster
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}/ClusterSharedNodeSecurityGroup'
      VpcId: 
        Fn::ImportValue:
          !Sub '${EnvironmentName}-VPC'
  ControlPlane:
    Type: 'AWS::EKS::Cluster'
    Properties:
      Name: !Sub '${EnvironmentName}-cluster'
      ResourcesVpcConfig:
        SecurityGroupIds:
          - !Ref ControlPlaneSecurityGroup
        SubnetIds:
          - Fn::ImportValue:
             !Sub '${EnvironmentName}-PrivateSubnet1'
          - Fn::ImportValue:
             !Sub '${EnvironmentName}-PrivateSubnet2'
          - Fn::ImportValue:
             !Sub '${EnvironmentName}-PrivateSubnet3'
          - Fn::ImportValue:
             !Sub '${EnvironmentName}-PublicSubnet1'
          - Fn::ImportValue:
             !Sub '${EnvironmentName}-PublicSubnet2'
          - Fn::ImportValue:
             !Sub '${EnvironmentName}-PublicSubnet3'
      RoleArn: 
        Fn::ImportValue:
          !Sub '${EnvironmentName}-ServiceRoleARN'
      Version: '1.15'
  ControlPlaneSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Communication between the control plane and worker nodegroups
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}/ControlPlaneSecurityGroup'
      VpcId: 
        Fn::ImportValue:
          !Sub '${EnvironmentName}-VPC'
  IngressDefaultClusterToNodeSG:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      Description: >-
        Allow managed and unmanaged nodes to communicate with each other (all
        ports)
      FromPort: 0
      GroupId: !Ref ClusterSharedNodeSecurityGroup
      IpProtocol: '-1'
      SourceSecurityGroupId: !GetAtt 
        - ControlPlane
        - ClusterSecurityGroupId
      ToPort: 65535
  IngressInterNodeGroupSG:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      Description: Allow nodes to communicate with each other (all ports)
      FromPort: 0
      GroupId: !Ref ClusterSharedNodeSecurityGroup
      IpProtocol: '-1'
      SourceSecurityGroupId: !Ref ClusterSharedNodeSecurityGroup
      ToPort: 65535
  IngressNodeToDefaultClusterSG:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      Description: Allow unmanaged nodes to communicate with control plane (all ports)
      FromPort: 0
      GroupId: !GetAtt 
        - ControlPlane
        - ClusterSecurityGroupId
      IpProtocol: '-1'
      SourceSecurityGroupId: !Ref ClusterSharedNodeSecurityGroup
      ToPort: 65535

Outputs:
  ARN:
    Export:
      Name: !Sub '${EnvironmentName}-ARN'
    Value: !GetAtt 
      - ControlPlane
      - Arn
  CertificateAuthorityData:
    Value: !GetAtt 
      - ControlPlane
      - CertificateAuthorityData
  ClusterSecurityGroupId:
    Export:
      Name: !Sub '${EnvironmentName}-ClusterSecurityGroupId'
    Value: !GetAtt 
      - ControlPlane
      - ClusterSecurityGroupId
  ClusterStackName:
    Value: !Ref 'AWS::StackName'
  Endpoint:
    Export:
      Name: !Sub '${EnvironmentName}-Endpoint'
    Value: !GetAtt 
      - ControlPlane
      - Endpoint
  FeatureNATMode:
    Value: Single
  SecurityGroup:
    Export:
      Name: !Sub '${EnvironmentName}-SecurityGroup'
    Value: !Ref ControlPlaneSecurityGroup
  
  SharedNodeSecurityGroup:
    Export:
      Name: !Sub '${EnvironmentName}-SharedNodeSecurityGroup'
    Value: !Ref ClusterSharedNodeSecurityGroup